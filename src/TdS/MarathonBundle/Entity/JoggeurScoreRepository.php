<?php

namespace TdS\MarathonBundle\Entity;

use TdS\MarathonBundle\Entity\Joggeur;
use TdS\MarathonBundle\Entity\Theme;
use TdS\MarathonBundle\Entity\Score;
use TdS\MarathonBundle\Entity\Saison;
use Doctrine\ORM\EntityRepository;

/**
 * ScoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JoggeurScoreRepository extends \Doctrine\ORM\EntityRepository {
	public function findAllBySaison(Saison $saison){
    	$themesId = array();
  		foreach ($saison->getThemes() as $theme) {
      		$themesId[] = $theme->getId();
  		}

  		$queryBuilder = $this->createQueryBuilder('c')
        	->addSelect('m')
        	->leftJoin('c.scores', 'm')
        	->where('m.theme IN (:theme)')
        	->setParameter('theme', $themesId);
 

		return $queryBuilder
     		->getQuery()
     		->getResult();

    }

    public function findJoggeurBySaison(Saison $saison, Joggeur $joggeur){
    	$themesId = array();
  		foreach ($saison->getThemes() as $theme) {
      		$themesId[] = $theme->getId();
  		}

  		$queryBuilder = $this->createQueryBuilder('c')
        	->addSelect('m')
        	->leftJoin('c.scores', 'm')
        	->where('m.theme IN (:theme)')
        	->setParameter('theme', $themesId)
        	->andWhere('c.joggeur = :joggeur')
       		->setParameter('joggeur', $joggeur)
        	;
 

		return $queryBuilder
     		->getQuery()
     		->getResult();

    }

    public function findJoggeurParTheme(Joggeur $joggeur, Theme $theme){
    	$queryBuilder = $this->createQueryBuilder('c')
        	->addSelect('m')
        	->leftJoin('c.scores', 'm')
        	->where('m.theme = :theme')
        	->setParameter('theme', $theme)
        	->andWhere('c.joggeur = :joggeur')
       		->setParameter('joggeur', $joggeur)
        	;
 

		return $queryBuilder
     		->getQuery()
     		->getResult();

    }

}

?>