<?php

namespace TdS\MarathonBundle\Entity;

use TdS\MarathonBundle\Entity\Joggeur;
use TdS\MarathonBundle\Entity\Theme;
use TdS\MarathonBundle\Entity\Score;
use TdS\MarathonBundle\Entity\Saison;
use Doctrine\ORM\EntityRepository;

/**
 * ScoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JoggeurScoreRepository extends \Doctrine\ORM\EntityRepository {
	public function findAllBySaison(Saison $saison){
    	$themesId = array();
  		foreach ($saison->getThemes() as $theme) {
      		$themesId[] = $theme->getId();
  		}
      

      $queryBuilder = $this->createQueryBuilder('c') 
          ->addSelect('c','s','t','j','ji')
          ->leftJoin('c.scores', 's') 
          ->leftJoin('s.theme','t')
          // ->leftJoin('t.image','ti')
          ->where('t.id IN (:id)')
          ->setParameter('id', $themesId)       
          ->leftJoin('c.joggeur', 'j')
          ->leftJoin('j.image', 'ji')
          // ->leftJoin('j.user', 'u')
          ;
                   
          
  		return $queryBuilder
       		->getQuery()
       		->getResult();

    }


    public function findJoggeurScoreForAllSaisons($id, $currSaisonId){
      $qb  = $this->_em->createQueryBuilder();
      $sub = $qb;

      $sub = $qb
          ->select('d')
          ->from('TdSMarathonBundle:Saison', 'd')
          ->where($qb->expr()->eq('d.id',$currSaisonId));
      
      $queryBuilder = $this->createQueryBuilder('c')
          ->addSelect('c','s','t','ti','partial ts.{id,titre}','j','ji')
          ->leftJoin('c.scores', 's')
          ->leftJoin('s.theme','t')          
          ->leftJoin('t.image','ti')
          ->leftJoin('t.saison','ts')
          ->orderBy('ts.titre', 'DESC')
          ->leftJoin('c.joggeur','j')
          ->leftJoin('j.image','ji')
          ->where('c.id = :id')
          ->andWhere($qb->expr()->notIn('ts.id',  $sub->getDQL()))
          ->setParameter('id', $id)

          ->getQuery()->getOneOrNullResult();
 
        return $queryBuilder;

    }


    public function findJoggeurBySaison(Saison $saison, Joggeur $joggeur){
    	$themesId = array();
  		foreach ($saison->getThemes() as $theme) {
      		$themesId[] = $theme->getId();
  		}

  		$queryBuilder = $this->createQueryBuilder('c')
        	->addSelect('c','s','t','ti','j','ji','jm','ju')
        	->leftJoin('c.scores', 's')
          ->leftJoin('s.theme','t')
          ->leftJoin('t.image','ti')
          ->where('s.theme IN (:theme)')
        	->setParameter('theme', $themesId)
          ->leftJoin('c.joggeur','j')
          ->leftJoin('j.image','ji')
          ->leftJoin('j.musicTitles','jm')
          ->leftJoin('j.user','ju')
        	->andWhere('c.joggeur = :joggeur')
       		->setParameter('joggeur', $joggeur)
        	->getQuery()->getOneOrNullResult();
 
        return $queryBuilder;
 
  		// return $queryBuilder
    //    		->getQuery()
    //    		->getResult();
    }



    public function findAllByTheme(Theme $theme){
      $queryBuilder = $this->createQueryBuilder('c')
          ->addSelect('c','s','t','j','i')
          ->leftJoin('c.scores', 's')
          ->leftJoin('s.theme','t')
          ->where('s.theme IN (:theme)')
          ->setParameter('theme', $theme)
          ->leftJoin('c.joggeur', 'j')
          ->leftJoin('j.image', 'i')
          ;

      return $queryBuilder
          ->getQuery()
          ->getResult();
    }



    public function findJoggeurParTheme(Joggeur $joggeur, Theme $theme){
    	$queryBuilder = $this->createQueryBuilder('c')
        	->addSelect('m')
        	->leftJoin('c.scores', 'm')
        	->where('m.theme = :theme')
        	->setParameter('theme', $theme)
        	->andWhere('c.joggeur = :joggeur')
       		->setParameter('joggeur', $joggeur)
        	;
 

  		return $queryBuilder
       		->getQuery()
       		->getResult();

    }






}

?>